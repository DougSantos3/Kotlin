package br.com.vraptor.bitBank.begin

import br.com.vraptor.bitBank.begin.modelo.Cliente
import br.com.vraptor.bitBank.exception.SaldoInsuficienteExeption

    /* Classe abstrata - Serve como base para outras classes, fornecendo tanto:
     üîπ propriedades(atributos) e metodos abstratos
    Que devem ser implementados pelas subclasses, mais tamb√©m fornecem.
     üîπ atributos concretos e m√©todos concretos(com comportamento padr√£o)

    Eles podem ser utilizados diretamente ou sobrescritos, caso deseja. Um atributo abstrato ou
    metodo √© como uma "promessa" feita em uma classe abstrata ou interface de que uma propriedade/campo ou metodo vai
    existir, mas quem vai realmente definir seu valor ou implementa√ß√£o √© a subclasse concreta.

    Quando voc√™ define um m√©todo ou atributo abstrato em uma classe abstrata, voc√™ est√° dizendo:
    ‚ÄúQualquer classe que herdar de mim deve implementar isso.‚Äù

    üîπ M√©todo abstrato
         √â uma fun√ß√£o sem corpo, ou seja, sem implementa√ß√£o.
         A subclasse concreta √© obrigada a fornecer o corpo do m√©todo.

    üîπ Atributo abstrato
         √â uma propriedade ou campo sem valor ou implementa√ß√£o definida.
         A subclasse tamb√©m √© obrigada a definir esse valor(ou implement√°-lo como get/set, dependendo da linguagem).

         Abaixo um exemplo real */
    abstract class Animal {

        /* atributo abstrato */
        abstract val nome: String

        /* m√©todo abstrato */
        abstract fun emitirSom()

        /* m√©todo concreto */
        fun respirar() {
            println("Respirando...")
        }
    }

    class Cachorro : Animal() {

        override val nome: String = "Rex"

        override fun emitirSom() {
            println("Latindo")
        }
    }

    respirar() /* Metodo respirar j√° vem pronto e emitirSom() precisa ser implementado pela subclasse. */

    /* Quando temos uma classe que deve ser herdada, mas n√£o deve ser inst√¢nciada diretamente, podemos substitu√≠-la de
    open para abstract, assegurando que o comportamento seja mantido conforme o esperado. */
abstract class Conta(
    titular: Cliente,
    numeroDeConta: Int
) : Metodo_Estatico_Companion_Object(
    titular = titular,
    numeroDeConta = numeroDeConta
) {
    fun transfere(valor: Double, destino: Metodo_Estatico_Companion_Object) {
        if (saldo < valor) {
            throw SaldoInsuficienteExeption()
        }
        saldo -= valor
        destino.deposita(valor)
    }

    /* Utilizamos as interfaces no contexto de funcion√°rios, por√©m, podemos tamb√©m estender o exemplos para o contexto
    de contas salario.

    Esse tipo de conta costuma ter as mesmas informa√ß√µes e comportamentos que uma conta comum, por√©m com mais
    restri√ß√µes. N√£o √© poss√≠vel usar o servi√ßo de transfer√™ncia.

    Nesta  implementa√ß√£o, mantenha a mesma t√©cnica de polimorfismo na transfer√™ncia para contas que precisam desse
    comportamento(corrente e poupan√ßa).
    Para testar o c√≥digo, tente realizar a transfer√™ncia com a conta sal√°rio e confira se apresenta um problema de
    compila√ß√£o.

    Foi utilizada a t√©cnica de heran√ßa para mais de uma classe, dessa forma, uma conta pode ser uma conta
    normal(modelo.ContaSalario:  modelo.Conta), como tamb√©m uma conta que permite a transfer√™ncia
    (modelo.ContaCorrente: modelo.ContaTransferivel).

    Poderia utilizar uma interface, por√©m, dado que a implementa√ß√£o de transferir √© a mesma entre as classes e o
    c√≥digo altera o saldo, n√£o seria poss√≠vel ter uma implementa√ß√£o padr√£o na interface e iria replicar o mesmo c√≥digo
    em ambas as contas que precisam transferir.
    Por√©m, ao manter a heran√ßa esse comportamento n√£o pode ser reutilizado por outras classes que fogem do contexto,
    ou seja, que n√£o s√£o contas.

    Voc√™ pode perceber que ambas as abordagens (via heran√ßa ou interface) s√£o v√°lidas, o mais importante √© saber as
    vantagens e desvantagens e decidir qual a melhor para a regra de neg√≥cio. */
}