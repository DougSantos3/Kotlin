package br.com.vraptor.bitBank.begin

interface interface1 {

    /*  Recebe uma senha do tipo Int e devolve um Boolean. */
    fun autentica(senha: Int) : Boolean
    /*  üîπ Interface

        √â um contrato: define o que deve ser feito, mas n√£o como.
        N√£o tem implementa√ß√£o de m√©todos (exceto default e static, mas isso √© exce√ß√£o).
        Uma classe pode implementar v√°rias interfaces tanto em Java como em Kotlin.
        Serve para padronizar comportamento entre classes diferentes.

        Exemplo:
        // Java
        public interface Animal {
            void emitirSom();
        }

        // Kotlin
        interface Animal {
            fun emitirSom()
        }

        üîπ Classe abstrata

        Pode ter m√©todos abstratos (sem implementa√ß√£o) e tamb√©m m√©todos concretos (com implementa√ß√£o).
        Pode ter atributos e construtores.
        Uma classe s√≥ pode herdar de uma √∫nica classe abstrata (limita√ß√£o do Java).
        Serve para definir regras e tamb√©m comportamentos comuns que as subclasses v√£o herdar.

        Exemplo:

        public abstract class Animal {
            // regra: quem herdar precisa implementar
            public abstract void emitirSom();

            // comportamento comum
            public void dormir() {
                System.out.println("Zzzz...");
            }
        }

        üîπ Comparando

        Interface = s√≥ contrato (regras).

        Classe abstrata = contrato + implementa√ß√£o parcial (regras + comportamentos comuns).
        No Spring, geralmente usamos interface + implementa√ß√£o concreta (@Service) porque isso facilita:
        Substituir a implementa√ß√£o (ex: SearchFacadeImpl hoje pode ser trocado por SearchFacadeV2Impl amanh√£).
        Facilita testes unit√°rios (mockamos a interface).

        ‚öñÔ∏è Analogia simples:

        Interface = "regra do jogo" (o que pode ou n√£o fazer).

        Classe abstrata = "regra do jogo + algumas jogadas prontas" que todos os jogadores podem reutilizar.

        Quer que eu te mostre esse mesmo exemplo (interface vs classe abstrata) aplicado ao seu caso do SearchFacade,
        para ficar bem pr√°tico dentro do Spring Boot?



        Perfeito üöÄ Vou te mostrar Interface vs Classe Abstrata em Java e Kotlin, aplicado ao mesmo cen√°rio para ficar
        bem claro.

        üîπ Em Java
        Interface
        public interface SearchFacade {
            SearchResponseDTO searchByTerm(String term, String from, String to, String postalCode, String clientIp);
        }

        Classe Abstrata
        public abstract class AbstractSearchFacade {

            // m√©todo abstrato ‚Üí deve ser implementado
            public abstract SearchResponseDTO searchByTerm(String term, String from, String to, String postalCode, String clientIp);

            // m√©todo concreto ‚Üí j√° tem comportamento
            public void logSearch(String term) {
                System.out.println("Buscando pelo termo: " + term);
            }
        }

        Implementa√ß√£o
        @Service
        public class SearchFacadeImpl extends AbstractSearchFacade implements SearchFacade {

            @Override
            public SearchResponseDTO searchByTerm(String term, String from, String to, String postalCode, String clientIp) {
                logSearch(term); // herdado da classe abstrata
                return new SearchResponseDTO(); // implementa√ß√£o real
            }
        }

        üîπ Em Kotlin
        Interface
        interface SearchFacade {
            fun searchByTerm(term: String, from: String?, to: String?, postalCode: String?, clientIp: String?): SearchResponseDTO
        }

        Classe Abstrata
        abstract class AbstractSearchFacade {

            abstract fun searchByTerm(term: String, from: String?, to: String?, postalCode: String?, clientIp: String?): SearchResponseDTO

            fun logSearch(term: String) {
                println("Buscando pelo termo: $term")
            }
        }

        Implementa√ß√£o
        import org.springframework.stereotype.Service

        @Service
        class SearchFacadeImpl : AbstractSearchFacade(), SearchFacade {

            override fun searchByTerm(term: String, from: String?, to: String?, postalCode: String?, clientIp: String?): SearchResponseDTO {
                logSearch(term) // herdado da classe abstrata
                return SearchResponseDTO() // implementa√ß√£o real
            }
        }

    ‚öñÔ∏è Diferen√ßa clara (Java e Kotlin)
    Caracter√≠stica	Interface	Classe Abstrata
    M√©todos abstratos	‚úÖ Sempre	‚úÖ Pode ter
    M√©todos concretos	‚ö†Ô∏è Apenas default e static (Java 8+)	‚úÖ Pode ter normalmente
    Atributos	‚ö†Ô∏è Constantes (static final)	‚úÖ Pode ter atributos normais
    Construtores	‚ùå N√£o	‚úÖ Pode ter
    Heran√ßa	‚úÖ M√∫ltiplas interfaces	‚ùå S√≥ pode herdar de uma classe abstrata
    Uso no Spring Boot	Geralmente para contratos + flexibilidade	Para compartilhar regras + comportamentos comuns

    Em resumo:

    Interface: contrato puro ‚Üí "o que deve ser feito".

    Classe abstrata: contrato + implementa√ß√£o parcial ‚Üí "o que deve ser feito + algumas coisas j√° prontas".


    Interface n√£o tem o constructor () depois do nome dele, s√≥ teria se fosse classe abstrata.

    Interface ela pode ter seus membros abstratos(metodos e atributos) ou seja os filhos que v√£o implementar, sendo que
    a interface √© s√≥ um contrato e n√£o est√¢ncia, mais a propria interface pode implementar os metodos inclusive criar
    um atributo ou property por√©m como ela n√£o guarda estado ent√£o apenas ficara assim val senha: Int e n√£o pode ser
    assim val senha: Int = 7 . Importante avisar que o atributo na interface sempre ser√° public e senha n√£o pode ser
    publico.

    Interface √© boa quando n√£o quer que a classe pegue metodos que vem da heran√ßa.

    √â possivel inserir mais de uma heran√ßa na classe.

    Podemos implementar interfaces em quaisquer classes sem carregar o legado da heran√ßa de uma classe que geralmente √©
    implementada para atender um contexto espec√≠fico e n√£o permite a heran√ßa m√∫ltipla.

    Para usar o polimorfismo em classes que tem o mesmo comportamento, mas n√£o herdam da mesma classe.
    Utilizar polimorfismo para classes com contextos diferentes, no nosso exemplo: cliente e funcion√°rio. */
}

